// Generated by CoffeeScript 1.12.7
var log, prettyPrint, tap;

log = console.log.bind(console);

tap = require('@sa0001/wrap-tap');

prettyPrint = require('./index');

tap.test('pretty-print', function(t) {
  var Model, basicValues, basicValuesOutput, deepValues, functions_arrow, functions_normal, getArgs, recursives, values;
  Model = (function() {
    function Model() {}

    return Model;

  })();
  getArgs = function() {
    return arguments;
  };
  basicValues = {
    arg: getArgs(true, 123, 'abc', {
      a: 1,
      b: 2,
      c: 3
    }),
    arr1: [1, 2, 3],
    arr2: Array(1, 2, 3),
    arr3: new Array(1, 2, 3),
    boo1: true,
    boo2: false,
    boo3: Boolean(true),
    boo4: new Boolean(true),
    dat: new Date(981173106789),
    err1: Error(),
    err2: new Error('abc'),
    err3: ReferenceError(),
    err4: new ReferenceError('abc'),
    err5: TypeError(),
    err6: new TypeError('abc'),
    fun1: function() {},
    fun2: () => {},
    fun3: Function('a', 'b', 'return a + b'),
    fun4: new Function('a', 'b', 'return a + b'),
    map: (function() {
      var v;
      v = new Map();
      v.set({
        key: 'val'
      }, 'obj');
      return v;
    })(),
    nul: null,
    num1: 1.23,
    num2: Number(1.23),
    num3: new Number(1.23),
    num4: 1 / 'A',
    num5: 1 / 0,
    obj1: {
      a: 1,
      b: 2,
      c: 3
    },
    obj2: Object({
      a: 1,
      b: 2,
      c: 3
    }),
    obj3: new Object({
      a: 1,
      b: 2,
      c: 3
    }),
    obj4: new Model(),
    pro: new Promise(function() {}),
    reg1: /[\d]/,
    reg2: RegExp('[\\d]'),
    reg3: new RegExp('[\\d]'),
    set: new Set([1, 2, 3]),
    str1: 'abc',
    str2: String('abc'),
    str3: new String('abc'),
    sym: Symbol('abc'),
    und: void 0,
    wmap: (function() {
      var v;
      v = new WeakMap();
      v.set({
        key: 'val'
      }, 'obj');
      return v;
    })()
  };
  basicValuesOutput = "{\n	arg: (function(){return arguments}).apply(null,[\n		true,\n		123,\n		\"abc\",\n		{ a: 1, b: 2, c: 3 }\n	]),\n	arr1: [ 1, 2, 3 ],\n	arr2: [ 1, 2, 3 ],\n	arr3: [ 1, 2, 3 ],\n	boo1: true,\n	boo2: false,\n	boo3: true,\n	boo4: true,\n	dat: new Date(981173106789 /*2001-02-03T04:05:06.789Z*/),\n	err1: new Error(),\n	err2: new Error(\"abc\"),\n	err3: new ReferenceError(),\n	err4: new ReferenceError(\"abc\"),\n	err5: new TypeError(),\n	err6: new TypeError(\"abc\"),\n	fun1: '<<Function>>',\n	fun2: '<<Function>>',\n	fun3: '<<Function>>',\n	fun4: '<<Function>>',\n	map: (function(){\n		let v = new Map()\n		v.set({ key: \"val\" }, \"obj\")\n		return v\n	}()),\n	nul: null,\n	num1: 1.23,\n	num2: 1.23,\n	num3: 1.23,\n	num4: NaN,\n	num5: Infinity,\n	obj1: { a: 1, b: 2, c: 3 },\n	obj2: { a: 1, b: 2, c: 3 },\n	obj3: { a: 1, b: 2, c: 3 },\n	obj4: {},\n	pro: new Promise(),\n	reg1: /[\\d]/,\n	reg2: /[\\d]/,\n	reg3: /[\\d]/,\n	set: new Set([ 1, 2, 3 ]),\n	str1: \"abc\",\n	str2: \"abc\",\n	str3: \"abc\",\n	sym: Symbol(\"abc\"),\n	und: undefined,\n	wmap: new WeakMap(/*...*/)\n}";
  values = function() {
    return {
      a: void 0,
      b: null,
      c: true,
      d: 123,
      e: 'ABC'
    };
  };
  deepValues = {
    a: {
      b: {
        c: {
          d: values()
        }
      }
    },
    b: [[[[Object.keys(values)]]]],
    c: [
      {
        d: [
          {
            e: values()
          }
        ]
      }
    ]
  };
  functions_normal = {
    empty: function() {},
    args_0: function() {
      return 'CONSTANT';
    },
    args_1: function(str) {
      return str.toLowerCase();
    },
    args_2: function(num1, num2) {
      return num1 + num2;
    },
    args_3: function(a, b, c) {
      return [a, b, c].sort();
    }
  };
  functions_arrow = {
    empty: () => {},
    args_0: () => { return 'CONSTANT' },
    args_1: (str) => { return str.toLowerCase() },
    args_2: (num1, num2) => { return num1 + num2 },
    args_3: (a, b, c) => { return [a, b, c].sort() }
  };
  recursives = {
    arr: [true, 1, 'A', [], {}, function() {}],
    obj: {
      a: true,
      b: 1,
      c: 'A',
      d: [],
      e: {},
      f: function() {}
    }
  };
  recursives.arr2 = recursives.arr;
  recursives.arr3 = [true, recursives.arr];
  recursives.obj2 = recursives.obj;
  recursives.obj3 = {
    a: true,
    b: recursives.obj
  };
  t.test('basic + tabs', function(t) {
    var output;
    output = prettyPrint(basicValues);
    return t.eq(output, basicValuesOutput);
  });
  t.test('basic + spaces', function(t) {
    var output;
    output = prettyPrint(basicValues, {
      indentation: '  '
    });
    return t.eq(output, basicValuesOutput.replace(/\t/g, '  '));
  });
  t.test('deep', function(t) {
    var output;
    output = prettyPrint(deepValues);
    return t.eq(output, "{\n	a: {\n		b: {\n			c: {\n				d: { a: undefined, b: null, c: true, d: 123, e: \"ABC\" }\n			}\n		}\n	},\n	b: [\n		[\n			[\n				[\n					[]\n				]\n			]\n		]\n	],\n	c: [\n		{\n			d: [\n				{\n					e: { a: undefined, b: null, c: true, d: 123, e: \"ABC\" }\n				}\n			]\n		}\n	]\n}");
  });
  t.test('functions (normal)', function(t) {
    var output;
    output = prettyPrint(functions_normal, {
      functions: true
    });
    return t.eq(output, "{\n	empty: function () {},\n	args_0: function () {\n		return 'CONSTANT';\n	},\n	args_1: function (str) {\n		return str.toLowerCase();\n	},\n	args_2: function (num1, num2) {\n		return num1 + num2;\n	},\n	args_3: function (a, b, c) {\n		return [a, b, c].sort();\n	}\n}");
  });
  t.test('functions (arrow)', function(t) {
    var output;
    output = prettyPrint(functions_arrow, {
      functions: true
    });
    return t.eq(output, "{\n	empty: () => {},\n	args_0: () => { return 'CONSTANT' },\n	args_1: (str) => { return str.toLowerCase() },\n	args_2: (num1, num2) => { return num1 + num2 },\n	args_3: (a, b, c) => { return [a, b, c].sort() }\n}");
  });
  return t.test('recursive objects', function(t) {
    var output;
    output = prettyPrint(recursives, {
      functions: true
    });
    return t.eq(output, "{\n	arr: [\n		true,\n		1,\n		\"A\",\n		[],\n		{},\n		function () {}\n	],\n	obj: {\n		a: true,\n		b: 1,\n		c: \"A\",\n		d: [],\n		e: {},\n		f: function () {}\n	},\n	arr2: '<<Recursive>>',\n	arr3: [ true, '<<Recursive>>' ],\n	obj2: '<<Recursive>>',\n	obj3: { a: true, b: '<<Recursive>>' }\n}");
  });
});
